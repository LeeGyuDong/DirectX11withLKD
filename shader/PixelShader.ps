////////////////////////////////////////////
// FileName : PixelShader.ps
////////////////////////////////////////////

////////////
// Global
////////////

Texture2D g_TextureMap : register(t0); //GBuffer 무결한 색
Texture2D g_NormalMap : register(t1); //GBuffer 노말
Texture2D g_ShadowMap[3] : register(t2); //cascade 그림자
Texture2D g_32BitMap : register(t5); //
Texture2D g_DownScaleMap : register(t6); //다운스케일
Texture2D g_AverageLum : register(t7); //0,0 좌표에 평균 휘도를 저장
Texture2D g_BloomLumMap : register(t8); //다운스케일된 뷰에 평균 휘도값을 빼고 블러효과 적용된 Bloom용
TextureCube g_TextureCube : register(t9); //큐브맵
Texture2D g_DepthStencilMap : register(t10); //GBuffer 깊이
Texture2D g_SpecularMap : register(t11); //GBuffer 재질
Texture2D g_CommonNormalMap : register(t12); //노말맵 미적용한 모델자체의 노말

SamplerState g_TextureSampler : register(ps_5_0, s0);
SamplerState g_ShadowSampler : register(ps_5_0, s1);
SamplerComparisonState g_ComarsionSampler : register(ps_5_0, s2);

cbuffer DirectLightBuffer : register(b0)
{
	matrix directLightCascadeVPProjectionMatrix0 : packoffset(c0);
	matrix directLightCascadeVPProjectionMatrix1 : packoffset(c4);
	matrix directLightCascadeVPProjectionMatrix2 : packoffset(c8);
	float4 directLightCascadeViewCenterXYZRadiusW0 : packoffset(c12);
	float4 directLightCascadeViewCenterXYZRadiusW1 : packoffset(c13);
	float4 directLightCascadeViewCenterXYZRadiusW2 : packoffset(c14);
	float4 directLightColor : packoffset(c15);
	float3 directLightDirection : packoffset(c16);
};

cbuffer pointLightBuffer : register(b1)
{
	float4 pointLightColor : packoffset(c0);
	float3 pointLightPosition : packoffset(c1);
	float pointLightRadius : packoffset(c1.w);
	float pointLightProjection33 : packoffset(c2);
	float pointLightProjection43 : packoffset(c2.y);
};

cbuffer MaterialBuffer : register(b2)
{
	float4 specularColor : packoffset(c0);
	float specularPower : packoffset(c1);
	float envFloat : packoffset(c1.y);
};

cbuffer ShadowBuffer : register(b3)
{
	float shadowHeight : packoffset(c0);
	float shadowWidth : packoffset(c0.y);
	float shadowBias : packoffset(c0.z);
	int shadowMode : packoffset(c0.w); //2 : pcf 1: blur 0 : default 
};

cbuffer GBuffer : register(b4)
{
	float2 perpectiveViewValue : packoffset(c0); // x = farZ / farZ - nearZ  , y = (-Near) / (FarZ - nearZ)
	float nearZ : packoffset(c0.z);
	float farZ : packoffset(c0.w);
	float3 cameraPosition : packoffset(c1);
	float cameraPadding : packoffset(c1.w);
};

cbuffer PostProcessBuffer : register(b5)
{
	float middleGray : packoffset(c0); //이건 상수 : HDR -> LDR의 변환스케일 높으면 빛 번지는 크기가 커짐
	float lumWhiteSqr : packoffset(c0.y);  //상수 : 전체적인 밝기, 높으면 어두움, 위랑 비슷함
	float deltaTime : packoffset(c0.z);
	float bloomScale : packoffset(c0.w);
	int bloomOn : packoffset(c1);
};

/////////////
// structure
/////////////
struct PixelGBufferType
{
	float4 color : SV_Target0;
	float4 normal : SV_TARGET1;
	float4 specular : SV_TARGET2;	
	float4 commonNormal : SV_TARGET3;
};


struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
	float3 tangent : TANGENT;
	float3 binormal : BINORMAL;
	float3 viewRay : TEXCOORD1;
	float4 worldPosition : TEXCOORD2;
	float4 localPosition : TEXCOORD3;
	uint RTlndex : SV_RenderTargetArrayIndex;
};

static const float2 g_SpecPowerRange = { 0.1f, 64.0f};

///////////////////////
// Util Function
///////////////////////
bool InsideCascade(float3 cworldPosition, float4 cascadeViewCenterXYZRadiusW)
{
	float left = cascadeViewCenterXYZRadiusW.x - cascadeViewCenterXYZRadiusW.w;
	float bottom = cascadeViewCenterXYZRadiusW.y - cascadeViewCenterXYZRadiusW.w;
	float back = cascadeViewCenterXYZRadiusW.z - cascadeViewCenterXYZRadiusW.w;
	float right = cascadeViewCenterXYZRadiusW.x + cascadeViewCenterXYZRadiusW.w;
	float top = cascadeViewCenterXYZRadiusW.y + cascadeViewCenterXYZRadiusW.w;
	float front = cascadeViewCenterXYZRadiusW.z + cascadeViewCenterXYZRadiusW.w;
	float cascadeBias = 0.5f;

	if(cworldPosition.x - cascadeBias < left || cworldPosition.x + cascadeBias > right)
		return false;
	if(cworldPosition.y - cascadeBias < bottom || cworldPosition.y + cascadeBias > top)
		return false;
	if(cworldPosition.z - cascadeBias < back || cworldPosition.z + cascadeBias > front)
		return false;

	return true;
}

///////////////////////
// Pixel Shader
///////////////////////
float4 RenderPointLightShadowPixelMain(PixelInputType input) : SV_TARGET //포인트 그림자 렌더링 (입력2D)
{
	//////GBuffer 언패킹용
	float4 textureColor;
	float4 depthStencilColor;
	float linearDepth;
	float3 commonNormal;
	
	float commonNormalDot;
	float3 lightToPixelFloat3;
	float3 lightToPixelFloat3Abs;
	float lightToCloserPixelDepth;
	float4 texture32BitColor;
	float4 result;
	float4 worldPos;
	float4 AtLightSidePosition;
	float directLightZ;
	float shadowViewResult;
		
	
	//////GBuffer 언패킹

	//깊이스텐실 값 추출
	depthStencilColor = g_DepthStencilMap.Sample(g_ShadowSampler, input.tex);
		
	//깊이값 선형으로 변환
	linearDepth  = depthStencilColor.x;
	linearDepth = perpectiveViewValue.x / (linearDepth - perpectiveViewValue.y);

	//노말맵 추출
	commonNormal = g_CommonNormalMap.Sample(g_TextureSampler, input.tex).xyz;

	//노말맵 정규화
	commonNormal = (commonNormal - 0.5) * 2.0f;

	/////GBuffer언패킹끝

	//그림자 효과를 적용하기 바로 전 32bit맵의 해당 픽셀 색 추출
	texture32BitColor = g_32BitMap.Sample(g_TextureSampler, input.tex);

	//원본텍스쳐색
	result = texture32BitColor;

	//월드좌표 구하기
	worldPos.xyz = cameraPosition.xyz + input.viewRay.xyz * linearDepth;
	worldPos.w =  1.0f;

	//if(depthStencilColor.x < 0.016f)
	//if(linearDepth < 0.0055f)

	//	return float4(1.0f, 0.0f, 0.0f, 1.0f);

	//return float4(input.viewRay.xyz, 1.0f);

	//빛에서 픽셀까지 벡터
	lightToPixelFloat3 = worldPos.xyz - pointLightPosition.xyz;

	//빛과의 각도검사
	commonNormalDot = dot( normalize(commonNormal), normalize(-lightToPixelFloat3));
	if( commonNormalDot <= 0.0001f)
		return result;

	//절대값
	lightToPixelFloat3Abs = abs(lightToPixelFloat3);

	//길이
	float lightToPixelFloat3Length = length(lightToPixelFloat3Abs);

	//범위안에 있는지 검사
	if(lightToPixelFloat3Length >= pointLightRadius)
		return texture32BitColor;

	//z 값
	float z = max(lightToPixelFloat3Abs.x , max(lightToPixelFloat3Abs.y, lightToPixelFloat3Abs.z));

	//라이트 공간에서의 depth값
	float depth = (pointLightProjection33 * z + pointLightProjection43) / z;

	if(shadowMode == 2)
	{
		float percentLit;
		percentLit = g_TextureCube.SampleCmpLevelZero(g_ComarsionSampler, lightToPixelFloat3, depth - shadowBias * (1.0f - linearDepth) * (1.0f - lightToPixelFloat3Length / pointLightRadius) );

		if(percentLit <= 0.9f)
		result.xyz = result.xyz * lerp(0.0f, 1.0f, lightToPixelFloat3Length / (pointLightRadius)); //감쇄값
	}
	else
	{
		//가장 가까이있는 깊이를 얻기위해 큐브맵 추출
		lightToCloserPixelDepth = g_TextureCube.Sample(g_TextureSampler, lightToPixelFloat3).x;

		//깊이 비교 : 가까이있는물체에는 shadowBiaw를 크게함 멀리있는물체에는 작게해야 왜곡덜함
		//if( directLightZ - (shadowBias * (1 - linearDepth) * (3 - cascadeSelection)) >=  shadowViewResult)
		//if( depth - shadowBias * (lightToPixelFloat3Length / pointLightRadius * 10) * (1 - linearDepth) >= lightToCloserPixelDepth)
		if( depth - shadowBias * (1 - linearDepth) * (1.0f - lightToPixelFloat3Length / pointLightRadius) >= lightToCloserPixelDepth)
		result.xyz = result.xyz * lerp(0.0f, 1.0f, lightToPixelFloat3Length / (pointLightRadius)); //감쇄값
	}

	//return float4(lightToCloserPixelDepth, lightToCloserPixelDepth, lightToCloserPixelDepth, 1.0f);
	
	//잘보여라
	result.w = 1.0f;
	
	//출력
	return result;
}

float4 RenderDirectLightShadowPixelMain(PixelInputType input) : SV_TARGET //다이렉션 그림자 렌더링 (입력2D)
{
	//////GBuffer 언패킹용
	float4 textureColor;
	float4 depthStencilColor;
	float linearDepth;
	float3 normalVector;
	float3 commonNormal;

	float4 texture32BitColor;
	float4 result;
	float4 worldPos;
	float4 AtLightSidePosition;
	float directLightZ;
	float shadowViewResult;
	float commonNormalDot;
	float4 lengthPixelToLight;


	//////GBuffer 언패킹

	//깊이스텐실 값 추출
	depthStencilColor = g_DepthStencilMap.Sample(g_ShadowSampler, input.tex);
	
	//노말맵 추출
	normalVector = g_NormalMap.Sample(g_TextureSampler, input.tex).xyz;
	commonNormal = g_CommonNormalMap.Sample(g_TextureSampler, input.tex).xyz;

	//노말맵 정규화
	normalVector = (normalVector - 0.5) * 2.0f;
	commonNormal = (commonNormal - 0.5) * 2.0f;

	//깊이값 선형으로 변환
	linearDepth  = depthStencilColor.x;

	linearDepth = perpectiveViewValue.x / (linearDepth - perpectiveViewValue.y);

	/////GBuffer언패킹끝

	//빛효과를 적용하기 바로 전 32bit맵의 해당 픽셀 색 추출
	texture32BitColor = g_32BitMap.Sample(g_TextureSampler, input.tex);

	//원본텍스쳐색
	result = texture32BitColor;

	//빛과의 각도검사
	commonNormalDot = dot( normalize(commonNormal), normalize(-directLightDirection));
	if( commonNormalDot <= 0.0001f)
		return result;

	//월드좌표 구하기
	worldPos.xyz = cameraPosition.xyz + input.viewRay.xyz * linearDepth;
	worldPos.w =  1.0f;

	//케이케이드 찾기
	int cascadeSelection;
	if(InsideCascade(worldPos.xyz, directLightCascadeViewCenterXYZRadiusW0))
		cascadeSelection = 0;
	else if(InsideCascade(worldPos.xyz, directLightCascadeViewCenterXYZRadiusW1))
		cascadeSelection = 1;
	else if(InsideCascade(worldPos.xyz, directLightCascadeViewCenterXYZRadiusW2))
		cascadeSelection = 2;
	else
		return result;

	//빛의 기준으로 위치변환
	if(cascadeSelection == 0)
		AtLightSidePosition = mul(worldPos, directLightCascadeVPProjectionMatrix0);
	else if(cascadeSelection == 1)
		AtLightSidePosition = mul(worldPos, directLightCascadeVPProjectionMatrix1);
	else if(cascadeSelection == 2)
		AtLightSidePosition = mul(worldPos, directLightCascadeVPProjectionMatrix2);
	AtLightSidePosition.xyz = AtLightSidePosition / AtLightSidePosition.w;

	//빛위치에 카메라 놓고 렌더링했을때의 해당 점의 z값
	directLightZ = AtLightSidePosition.z;

	//세이더뷰에서 값을 얻기위해 
	AtLightSidePosition.x = AtLightSidePosition.x * 0.5 + 0.5;
	AtLightSidePosition.y = AtLightSidePosition.y * -0.5 + 0.5;

	if(shadowMode == 2)
	{
		//pcf
		float percentLit;
		if(cascadeSelection == 0)
			percentLit = g_ShadowMap[0].SampleCmpLevelZero(g_ComarsionSampler, AtLightSidePosition.xy, directLightZ - (shadowBias * (1 - linearDepth) * (3 - cascadeSelection)));
		else if(cascadeSelection == 1)
			percentLit = g_ShadowMap[1].SampleCmpLevelZero(g_ComarsionSampler, AtLightSidePosition.xy, directLightZ - (shadowBias * (1 - linearDepth) * (3 - cascadeSelection)));
		else if(cascadeSelection == 2)
			percentLit = g_ShadowMap[2].SampleCmpLevelZero(g_ComarsionSampler, AtLightSidePosition.xy, directLightZ - (shadowBias * (1 - linearDepth) * (3 - cascadeSelection)));

		result.xyz = result.xyz * max(percentLit, 0.2f);
	}
	else if(shadowMode == 1)
	{
		//그림자 추출
		if(cascadeSelection == 0)
			shadowViewResult = g_ShadowMap[0].Sample(g_ShadowSampler, AtLightSidePosition.xy).x;
		else if(cascadeSelection == 1)
			shadowViewResult = g_ShadowMap[1].Sample(g_ShadowSampler, AtLightSidePosition.xy).x;
		else if(cascadeSelection == 2)
			shadowViewResult = g_ShadowMap[2].Sample(g_ShadowSampler, AtLightSidePosition.xy).x;
	
		//깊이 비교
		//if( directLightZ - (shadowBias * (cascadeSelection + 1)) >=  shadowViewResult)
		//if( directLightZ - ( 0.03f * max(0.3f, ( 1.0f - commonNormalDot)) )  >=  shadowViewResult)
		if( directLightZ - (shadowBias * (1 - linearDepth) * (3 - cascadeSelection)) >=  shadowViewResult)
			result.xyz = result.xyz * 0.2f;
	}
	
	
	//잘보여라
	result.w = 1.0f;
	
	//출력
	return result;
}

float4 RenderDirectionLightPixelMain(PixelInputType input) : SV_TARGET //다이렉션 빛 렌더링 (입력2D)
{
	//////GBuffer 언패킹용
	float4 textureColor;
	float3 normalVector;
	float4 specularColor; //w는 파워
	float4 depthStencilColor;
	float linearDepth;
	float specularPower;
	float env;

	float4 texture32BitColor;
	float4 result;
	float3 worldPos;
	//빛
	float3 directLightBackDirection;
	float3 lightReflectionVector;
	float4 specularResult;
	float3 viewDirection;
	float directLightIntensity;

	//////GBuffer 언패킹

	//텍스쳐 추출
	textureColor = g_TextureMap.Sample(g_TextureSampler, input.tex);

	//환경매핑 계수값 추출
	env = textureColor.w;
	textureColor.w = 1.0f;

	//노말맵 추출
	normalVector = g_NormalMap.Sample(g_TextureSampler, input.tex).xyz;

	//노말맵 정규화
	normalVector = normalize(normalVector * 2.0 - 1.0f);

	//스페큘러맵 추출
	specularColor = g_SpecularMap.Sample(g_TextureSampler, input.tex);

	//스페큘러 파워 정규화 해제
	specularPower = (specularColor.w * g_SpecPowerRange.y) + g_SpecPowerRange.x;

	//깊이스텐실 값 추출
	depthStencilColor = g_DepthStencilMap.Sample(g_ShadowSampler, input.tex);
		
	//깊이값 선형으로 변환
	linearDepth  = depthStencilColor.x;
	linearDepth = perpectiveViewValue.x / (linearDepth - perpectiveViewValue.y);

	/////GBuffer언패킹끝

	//빛효과를 적용하기 바로 전 32bit맵의 해당 픽셀 색 추출
	texture32BitColor = g_32BitMap.Sample(g_TextureSampler, input.tex);

	//월드좌표 구하기
	worldPos = cameraPosition.xyz + input.viewRay.xyz * linearDepth;

	//보는 방향 노말라이즈
	viewDirection = normalize(input.viewRay.xyz);

	//계산하기 쉽게 빛 방향을 뒤집기
	directLightBackDirection = -directLightDirection;

	//각도에따른 빛의 강도 계산
	directLightIntensity = saturate(dot(normalVector, directLightBackDirection));

	//각도에 따른 스페큘러 계산
	if(directLightIntensity > 0.0f)
    {
		
		//빛이 표면에 맞고 반사된 벡터 계산  ( 인자는 빛의 반대방향? 아니듯한데)
		//lightReflectionVector = normalize( reflect(  directLightDirection, input.normal) ); 
		lightReflectionVector = normalize( reflect( directLightDirection, normalVector) ); 

        specularResult = pow(saturate(dot(lightReflectionVector, -viewDirection)), specularPower);
		specularResult = saturate ( specularResult * specularColor * directLightColor) ;
	}

	//텍스처 색
	result = textureColor;

	//스페큘러 더함
	result =  result + specularResult;

	//빛의 강도와 빛의 색에따라 위 결과를 조절
	result = saturate(directLightColor * directLightIntensity * result + texture32BitColor);

	//잘보여라
	result.w = 1.0f;
	
	//출력
	return result;
}

float4 RenderPointLightPixelMain(PixelInputType input) : SV_TARGET //포인트 빛 렌더링 (입력2D)
{
	//////GBuffer 언패킹용
	float4 textureColor;
	float3 normalVector;
	float4 specularColor; //w는 파워
	float4 depthStencilColor;
	float linearDepth;
	float specularPower;
	float env;

	float4 texture32BitColor;
	float4 result;
	float3 worldPos;
	//빛
	float3 pointToPixelNormal;
	float3 lightReflectionVector;
	float4 specularResult;
	float pointLightIntensity;
	float3 pointToPixelVector;
	float pointToPixelLength;

	//////GBuffer 언패킹

	//텍스쳐 추출
	textureColor = g_TextureMap.Sample(g_TextureSampler, input.tex);
	
	//환경매핑 계수값 추출
	env = textureColor.w;
	textureColor.w = 1.0f;

	//노말맵 추출
	normalVector = g_NormalMap.Sample(g_TextureSampler, input.tex).xyz;

	//노말맵 정규화
	normalVector = normalize(normalVector * 2.0 - 1.0f);

	//return float4(normalVector.xyz, 1.0f);

	//스페큘러맵 추출
	specularColor = g_SpecularMap.Sample(g_TextureSampler, input.tex);

	//스페큘러 파워 정규화 해제
	specularPower = (specularColor.w * g_SpecPowerRange.y) + g_SpecPowerRange.x;

	//깊이스텐실 값 추출
	depthStencilColor = g_DepthStencilMap.Sample(g_ShadowSampler, input.tex);
		
	//깊이값 선형으로 변환
	linearDepth  = depthStencilColor.x;
	linearDepth = perpectiveViewValue.x / (linearDepth - perpectiveViewValue.y);

	/////GBuffer언패킹끝

	//빛효과를 적용하기 바로 전 32bit맵의 해당 픽셀 색 추출
	texture32BitColor = g_32BitMap.Sample(g_TextureSampler, input.tex);
	
	//월드좌표 구하기
	worldPos = cameraPosition.xyz + input.viewRay.xyz * linearDepth;

	//포인트라이트에서 물체까지 벡터
	pointToPixelVector = worldPos - pointLightPosition;

	//빛에서 물체까지 거리
	pointToPixelLength = length(pointToPixelVector);

	//범위안에 없다면 계산 x
	if(pointToPixelLength >= pointLightRadius)
		return texture32BitColor;

	//빛이 픽셀을 보는 방향 노말라이즈
	pointToPixelNormal = normalize(pointToPixelVector);

	//각도에따른 빛의 강도 계산
	pointLightIntensity = saturate(dot(normalVector, -pointToPixelNormal));

	//거리에 따른 빛의 강도 계산
	pointLightIntensity = saturate(pointLightIntensity * ( 1.0f - pointToPixelLength / pointLightRadius ));

	//각도에 따른 스페큘러 계산
	if(pointLightIntensity > 0.0f)
    {
		
		//빛이 표면에 맞고 반사된 벡터 계산  ( 인자는 빛의 반대방향? 아니듯한데)
		//lightReflectionVector = normalize( reflect(  pointToPixelNormal, input.normal) ); 
		lightReflectionVector = normalize( reflect( pointToPixelNormal, normalVector) ); 

        specularResult = pow(saturate(dot(lightReflectionVector, -pointToPixelNormal)), specularPower);
		specularResult = saturate ( specularResult * specularColor * pointLightColor) ;
	}

	//텍스처 색
	result = textureColor;

	//스페큘러 더함
	result =  result + specularResult;

	//빛의 강도와 빛의 색에따라 위 결과를 조절
	result = saturate(pointLightColor * pointLightIntensity * result + texture32BitColor);

	//잘보여라
	result.w = 1.0f;
	
	//출력
	return result;
}

float4 RenderPointLightDepthShadowPixelMain(PixelInputType input) : SV_TARGET // 포인트 라이트의 큐브맵에 깊이대신 월드거리를 렌더링
{
	float lightToPixelLength;

	lightToPixelLength = length(input.worldPosition - pointLightPosition);

	//정규화
	lightToPixelLength = (lightToPixelLength - nearZ) / farZ;

	return float4(lightToPixelLength, 0.0f, 0.0f, 0.0f);
}

float4 RenderDirectionLightDepthShadowPixelMain(PixelInputType input) : SV_TARGET //다이렉션 라이트의 깊이버퍼에 깊이값 렌더링
{
	return float4(0.5f, 0.5f, 0.5f, 0.5f);
}

float4 SkyBoxPixelShader(PixelInputType input) : SV_TARGET // 마지막 전 스카이큐브 렌더링
{
	float4 skyColor;
	float4 textureColor;
	float4 depthStencilColor;
	float linearDepth;
	float depthBias = 0.95f;

	//x가 0~해상도넓이  , y가 0~해상도높이 이었던것을 0~1로 조정
	input.position.x = shadowWidth * input.position.x;
	input.position.y = shadowHeight * input.position.y; 
	
	//깊이스텐실 값 추출
	depthStencilColor = g_DepthStencilMap.Sample(g_ShadowSampler, input.position.xy);

	//깊이값 선형으로 변환
	linearDepth  = depthStencilColor.x;
	linearDepth = perpectiveViewValue.x / (linearDepth - perpectiveViewValue.y);

	//너무멀리잇는것은 그냥 풍경으로 렌더링판정
	if(linearDepth >= depthBias)
	{
		skyColor = g_TextureCube.Sample(g_TextureSampler, input.localPosition.xyz);

		return skyColor;
	}

	//아니면 텍스처 샘플 렌더링
	textureColor = g_32BitMap.Sample(g_TextureSampler, input.position.xy);

	return textureColor;
	
}

float4 Render32BitTexturePixelMain(PixelInputType input) : SV_TARGET //32Bit를 화면에 렌더링
{
	float4 color;
	
	color = g_32BitMap.Sample(g_TextureSampler, input.tex);
	
	color.w = 1.0f;
	return color;
}

float4 RenderTexturePixelMain(PixelInputType input) : SV_TARGET //일반 텍스쳐 화면에 렌더링
{
	float4 color;
	
	color = g_TextureMap.Sample(g_TextureSampler, input.tex);
	clip(color.w - 0.1);

	return color;
}

float4 RenderHDRWithBloomPixelMain(PixelInputType input) : SV_TARGET //HDR, Bloom적용 후  화면에 렌더링(입력2D)
{
	float4 color;
	float4 averagLumResult;
	float avgLum; //이건 계산을통해 : 높으면 어두움
	float4 bloomLumResult;

	color = g_32BitMap.Sample(g_TextureSampler, input.tex);
	
	if(bloomOn)
	{
		bloomLumResult = g_BloomLumMap.Sample(g_TextureSampler, float2(input.tex.x / 512, input.tex.y / 512));
		color.xyz = color.xyz + bloomScale * bloomLumResult.xyz;
	}

	averagLumResult = g_AverageLum.Sample(g_TextureSampler, float2(0.0f, 0.0f));
	avgLum = averagLumResult.x + averagLumResult.y + averagLumResult.z;

	float LScale = dot(color , float4(0.299f, 0.587f, 0.114f, 0.0f));
	LScale = LScale * middleGray / avgLum;
	LScale = ( LScale + LScale * LScale / lumWhiteSqr) / (1.0 + LScale);

	color = color * LScale;

	color.w = 1.0f;
	return color;
}


PixelGBufferType RenderGBufferPixelMain(PixelInputType input) //GBuffer 패킹
{
	PixelGBufferType result;
	float4 color;
	float4 normalMapColor;
	float3 normalVector;

	color = g_TextureMap.Sample(g_TextureSampler, input.tex);
	color.w = envFloat;

	//범프맵 추출
	normalMapColor = g_NormalMap.Sample(g_TextureSampler, input.tex);

	//범프맵 확장 (0, +1) -> (-1, +1)
    normalMapColor = (normalMapColor * 2.0f) - 1.0f;

	//이제 세계좌표에서 그냥 앞을보고 서있는 평면범프노말벡터가 세계좌표에 인풋의 해당하는 각도로 서있는  자신만의 범프노말벡터로 바뀜  
    normalVector = input.normal + normalMapColor.x * input.tangent + normalMapColor.y * input.binormal;
	normalVector = normalize(normalVector); 
	
	result.color = color;
	result.normal = float4(normalVector * 0.5f + 0.5f , 1.0f);
	result.specular = float4(specularColor.xyz, (specularPower - g_SpecPowerRange.x ) / g_SpecPowerRange.y); // SpecPower는 0~1.f 로 정규화 필요
	result.commonNormal = float4(input.normal.xyz * 0.5f + 0.5f, 1.0f);

	return result;
}
